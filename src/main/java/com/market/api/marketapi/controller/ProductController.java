package com.market.api.marketapi.controller;

import DTO.ProductDTO;
import com.market.api.marketapi.exception.BadRequestException;
import com.market.api.marketapi.exception.ResourceNotFoundException;
import com.market.api.marketapi.models.Product;
import com.market.api.marketapi.services.ProductService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.time.LocalDateTime;
import java.util.*;
import org.springframework.http.HttpStatus;

/**
 * Controller class for managing Product-related HTTP requests.
 *
 * Author: Anugrah Balakrishnan
 * Date Modified: 28 July 2024
 */
@RestController
@RequestMapping("/api/products")
public class ProductController {

    @Autowired
    private ProductService productService;

    /**
     * Retrieves all products with pagination.
     *
     * @param page Page number
     * @param size Page size
     * @return List of Product entities
     */
    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping("/get/all")
    public List<Product> getAllProducts(@RequestParam(defaultValue = "0") int page,
                                        @RequestParam(defaultValue = "10") int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<Product> productPage = productService.getAllProducts(pageable);
        return productPage.getContent();
    }

    /**
     * Retrieves a product by its ID.
     *
     * @param id Product ID
     * @return ResponseEntity containing Optional of ProductDTO
     * @throws ResourceNotFoundException if product with given ID is not found
     */
    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping("/get/{id}")
    public ResponseEntity<Optional<ProductDTO>> getProductById(@PathVariable Long id) {
        Optional<ProductDTO> product = productService.getProductById(id);
        if (!product.isPresent()) {
            throw new ResourceNotFoundException("Product not found with id: " + id);
        }
        return ResponseEntity.ok(product);
    }

    /**
     * Creates a new product from a ProductDTO.
     *
     * @param productDTO ProductDTO to create
     * @return ResponseEntity containing created ProductDTO
     */
    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping("/create")
    public ResponseEntity<ProductDTO> addProduct(@RequestBody ProductDTO productDTO) {
        ProductDTO savedProduct = productService.saveProduct(productDTO);
        return ResponseEntity.ok(savedProduct);
    }

    /**
     * Updates an existing product.
     *
     * @param productId ID of the product to update
     * @param updatedProduct Updated Product entity with new data
     * @return ResponseEntity containing updated Product entity
     */
    @PreAuthorize("hasRole('ADMIN')")
    @PutMapping("/update/{productId}")
    public ResponseEntity<Product> updateProduct(
            @PathVariable("productId") Long productId,
            @RequestBody Product updatedProduct) {
        Product updated = productService.updateProduct(productId, updatedProduct);
        return ResponseEntity.ok(updated);
    }

    /**
     * Deletes a product by its ID.
     *
     * @param id ID of the product to delete
     * @return ResponseEntity indicating successful deletion
     */
    @PreAuthorize("hasRole('ADMIN')")
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> deleteProduct(@PathVariable Long id) {
        productService.deleteProduct(id);
        return ResponseEntity.noContent().build();
    }

    /**
     * Retrieves the total revenue from all product sales.
     *
     * @return ResponseEntity containing total revenue as a Double
     */
    @GetMapping("/revenue/total")
    public ResponseEntity<Double> getTotalRevenue() {
        return ResponseEntity.ok(productService.getTotalRevenue());
    }

    /**
     * Retrieves the revenue generated by a specific product.
     *
     * @param productId ID of the product
     * @return ResponseEntity containing revenue as a Double
     */
    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping("/revenue/{productId}")
    public ResponseEntity<Double> getRevenueByProduct(@PathVariable Long productId) {
        return ResponseEntity.ok(productService.getRevenueByProduct(productId));
    }

    /**
     * Exception handler for ResourceNotFoundException.
     *
     * @param ex ResourceNotFoundException instance
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<Map<String, Object>> handleResourceNotFoundException(ResourceNotFoundException ex) {
        Map<String, Object> response = new HashMap<>();
        response.put("timestamp", LocalDateTime.now());
        response.put("status", HttpStatus.NOT_FOUND.value());
        response.put("error", "Resource Not Found");
        response.put("message", ex.getMessage());
        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
    }

    /**
     * Exception handler for BadRequestException.
     *
     * @param ex BadRequestException instance
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(BadRequestException.class)
    public ResponseEntity<Map<String, Object>> handleBadRequestException(BadRequestException ex) {
        Map<String, Object> response = new HashMap<>();
        response.put("timestamp", LocalDateTime.now());
        response.put("status", HttpStatus.BAD_REQUEST.value());
        response.put("error", "Bad Request");
        response.put("message", ex.getMessage());
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    /**
     * Exception handler for generic Exception.
     *
     * @param ex Exception instance
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(Exception.class)
    public ResponseEntity<Map<String, Object>> handleGlobalException(Exception ex) {
        Map<String, Object> response = new HashMap<>();
        response.put("timestamp", LocalDateTime.now());
        response.put("status", HttpStatus.INTERNAL_SERVER_ERROR.value());
        response.put("error", "Internal Server Error");
        response.put("message", "An unexpected error occurred.");
        return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
    }

}
